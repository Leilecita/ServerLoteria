<?php
require_once "BaseController.php";
require_once __DIR__.'/../models/UserModel.php';
require_once __DIR__.'/../models/OperationModel.php';

class UsersController extends BaseController {


    function __construct(){
        parent::__construct();
        $this->model = new UserModel();
    }

    function getClients(){

        if($_GET['order'] == "name"){
            $list_clients=$this->getModel()->findAllByName($this->getFilters(),$this->getPaginator());
        }else{
            $list_clients=$this->getModel()->findAllByDebt($this->getFilters(),$this->getPaginator());
        }


        $this->returnSuccess(200, $list_clients);
    }


    function get(){
        if(isset($_GET['method'])){
            $this->method();
        }else if($this->validateId()){
            $entity = $this->getModel()->findById($_GET['id']);
            if(!empty($entity)){
                $this->returnSuccess(200,$entity);
            }else{
                $this->returnError(404,"ENTITY NOT FOUND");
            }

        }else{
            $this->getClients();
            //  $this->returnSuccess(200,$this->getModel()->findAllByNameAndDebt($this->getFilters(),$this->getPaginator()));
        }
    }

    public function delete()
    {
        $user_id = $_GET['id'];
        $user = $this->getModel()->findById($user_id);
        if(!empty($user)) {
            $operationModel = new OperationModel();
            $operationModel->deleteByUserId($user_id);
            parent::delete();
           // $this->logEvent('Usuario', 'Eliminado ' . $user_id, 0, $user['name']);
        } else{
            $this->returnError(404,"USER NOT FOUND");
        }
    }


    public function getFilters()
    {

      $filters = parent::getFilters(); // TODO: Change the autogenerated stub
        if(isset($_GET['query']) && !empty($_GET['query'])){
            $filters[] = 'name like "%'.$_GET['query'].'%"';
        }
        return $filters;
    }

    function logEditionEvent($previous,$updated){

       // $this->logEvent($this->getModel()->getLogName($updated),$this->getModel()->getStateEdited() ,$this->getModel()->getAmount($updated),$this->change($previous, $updated));
        $this->logEvent($this->getModel()->getLogName($updated),$previous['name'] ,$this->getModel()->getAmount($updated),$this->change($previous, $updated));
    }

    function change($previous, $updated){

        $name="";
        $phone="";
        $document="";

        if($previous['name'] !== $updated['name']){
            $name= "Nombre: ".$previous['name']. " -> ". $updated['name']." ";
        }
        if($previous['phone'] !== $updated['phone']){
            $phone= "TelÃ©fono: ".$previous['phone']. " -> ". $updated['phone']." ";
        }
        if($previous['document'] !== $updated['document']){
            $document= "DNI/User: ".$previous['document']. " -> ". $updated['document'];
        }

        return '['.$this->getModel()->getStateEdited() .'] '.$name.$phone.$document;

    }
}